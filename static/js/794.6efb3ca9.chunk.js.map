{"version":3,"file":"static/js/794.6efb3ca9.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Loader.jsx","Pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  padding: 20px 30px;\n  border: 1px solid black;\n  width: 300px;\n`;\n\nexport const StyledInput = styled(Field)`\n  width: 150px;\n  margin-top: 5px;\n  border-radius: 7px;\n  border: 1px solid black;\n  padding: 3px 3px;\n`;\n\nexport const StyledError = styled(ErrorMessage)`\n  color: red;\n  font-size: 15px;\n`;\n\nexport const StyledButton = styled.button`\n  width: 100px;\n  background-color: white;\n  border: 1px solid black;\n  border-radius: 7px;\n  cursor: pointer;\n  margin-top: 15px;\n  height: 25px;\n  &:hover,\n  &:focus {\n    background-color: black;\n    color: white;\n  }\n`;\n\nexport const StyledLavel = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 18px;\n  margin-bottom: 5px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectorFilter = state => state.filterStore;\nexport const selectorContacts = state => state.contactsStore.items;\n\nexport const selectorFilteredUsers = createSelector(\n  [selectorContacts, selectorFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact => {\n      return contact.name\n        .toLocaleLowerCase()\n        .includes(filter.toLocaleLowerCase());\n    });\n  }\n);\n","import React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  StyledForm,\n  StyledInput,\n  StyledLavel,\n  StyledButton,\n  StyledError,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'components/redux/operations';\nimport { selectorContacts } from 'components/redux/selectors';\n\nconst validation = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short!')\n    .max(30, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .min(7, 'Must be min 7 numbers!')\n    .max(15, 'Must be max 15 numbers!!')\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectorContacts);\n  const handlerSubmittingForm = ({ name, number }) => {\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is alredy in contacts`);\n      return;\n    }\n    const newContact = { name, number };\n    dispatch(addContact(newContact));\n  };\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={validation}\n        onSubmit={(values, actions) => {\n          handlerSubmittingForm(values);\n          actions.resetForm();\n        }}\n      >\n        <StyledForm>\n          <StyledLavel>\n            Name\n            <StyledInput\n              type=\"text\"\n              name=\"name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n            <StyledError name=\"name\" component=\"div\" />\n          </StyledLavel>\n          <StyledLavel>\n            Number\n            <StyledInput\n              type=\"tel\"\n              name=\"number\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <StyledError name=\"number\" component=\"div\" />\n          </StyledLavel>\n\n          <StyledButton type=\"submit\">Add contact</StyledButton>\n        </StyledForm>\n      </Formik>\n    </div>\n  );\n};\n","import { styled } from 'styled-components';\n\n\nexport const List = styled.ol`\n  margin-top: 15px;\n`;\nexport const Item = styled.li`\n  display: flex;\n  gap: 10px;\n  align-items: center;\n  margin-bottom: 5px;\n`;\nexport const Paragraph = styled.p`\n  margin: 0;\n  font-size: 18px;\n`;\nexport const Button = styled.button`\n  margin-left: 10px;\n  width: 70px;\n  height: 25px;\n  border: 1px solid black;\n  border-radius: 7px;\n  background-color: white;\n  cursor: pointer;\n\n\n  /* display: flex;\n  justify-content: space-between;\n   */\n\n  &:hover,\n  &:focus {\n    background-color: black;\n    color: white;\n  }\n`;\n","import { List, Item, Paragraph, Button } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'components/redux/operations';\nimport { selectorFilteredUsers } from 'components/redux/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filteredUsers = useSelector(selectorFilteredUsers);\n\n  return (\n    <List>\n      {filteredUsers.map(contact => {\n        console.log(contact)\n        return (\n          <Item key={contact.id}>\n            <Paragraph>\n              {contact.name} : {contact.number}\n            </Paragraph>\n            <Button\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              Delete\n            </Button>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n","import { filter } from '../redux/filterSlice';\nimport { useDispatch } from 'react-redux';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const findUser = ({ target: { value } }) => {\n    dispatch(filter(value));\n  };\n\n\n  return (\n    <div>\n      <h3\n        style={{\n          fontSize: '18px',\n          marginBottom: '10px'\n        }}\n      >\n        Find contact by name\n      </h3>\n      <input\n        type=\"text\"\n        onChange={findUser}\n        style={{\n          border: '1px solid black',\n          padding: '3px 3px',\n          borderRadius: '7px',\n        }}\n      />\n    </div>\n  );\n};\n\n// export const Filter = ({ find }) => {\n\n//   const findContact = event => {\n//     setFilter(event.target.value);\n//   };\n\n//   return (\n//     <div>\n//       <p\n//         style={{\n//           fontSize: '18px',\n//         }}\n//       >\n//         Find contact by name\n//       </p>\n//       <input\n//         type=\"text\"\n//         onChange={find}\n//         style={{\n//           border: '1px solid black',\n//           padding: '3px 3px',\n//           borderRadius: '7px',\n//         }}\n//       />\n//     </div>\n//   );\n// };\n","import { RotatingLines } from 'react-loader-spinner';\nexport const Loader = () => {\n  return (\n    <div style={{ display: 'flex', justifyContent: 'left', marginTop: '10px', marginLeft: '20px' }}>\n      <RotatingLines\n        strokeColor=\"blue\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"50\"\n        visible={true}\n      />\n    </div>\n  );\n};","import { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { Loader } from '../components/Loader';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../components/redux/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const loadingInfo = useSelector(state => state.contactsStore.isLoading);\n  const errorInfo = useSelector(state => state.contactsStore.error);\n\n  return (\n    <div style={{ paddingLeft: '100px', display: 'flex', gap: '300px' }}>\n      <div>\n        <h3 style={{ marginBottom: '10px' }}>Write down your contact</h3>\n        <ContactForm />\n      </div>\n      <div>\n     \n        <Filter />\n        <h3 style={{ marginTop: '10px' }}>Your contacts</h3>\n        {loadingInfo && !errorInfo && <Loader />}\n      \n        <ContactList />\n      </div>\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","StyledInput","Field","_templateObject2","StyledError","ErrorMessage","_templateObject3","StyledButton","_templateObject4","StyledLavel","_templateObject5","selectorContacts","state","contactsStore","items","selectorFilteredUsers","createSelector","filterStore","contacts","filter","contact","name","toLocaleLowerCase","includes","validation","Yup","shape","min","max","required","number","ContactForm","dispatch","useDispatch","useSelector","_jsx","children","Formik","initialValues","validationSchema","onSubmit","values","actions","_ref","find","alert","concat","newContact","addContact","handlerSubmittingForm","resetForm","_jsxs","type","title","component","List","Item","Paragraph","Button","ContactList","filteredUsers","map","console","log","onClick","deleteContact","id","Filter","style","fontSize","marginBottom","onChange","value","target","border","padding","borderRadius","Loader","display","justifyContent","marginTop","marginLeft","RotatingLines","strokeColor","strokeWidth","animationDuration","width","visible","useEffect","fetchContacts","loadingInfo","isLoading","errorInfo","error","paddingLeft","gap"],"sourceRoot":""}